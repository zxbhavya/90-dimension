class SlidingWindow {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        vector<int> result;
        deque<int> dq;
        int n = nums.size();
        
        for (int i = 0; i < n; i++) {
            // Remove the element from front if it is not part of the current window
            if (!dq.empty() && dq.front() == i - k) {
                dq.pop_front();
            }
            
            // Remove the elements from back of the deque that are smaller than current element
            while (!dq.empty() && nums[dq.back()] < nums[i]) {
                dq.pop_back();
            }
            
            // Add current element's index to the back of the deque
            dq.push_back(i);
            
            // If the current window is of size k, then the front of the deque contains the maximum element
            if (i >= k - 1) {
                result.push_back(nums[dq.front()]);
            }
        }
        
        return result;
    }
};
